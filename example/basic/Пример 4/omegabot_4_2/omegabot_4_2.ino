#define IR_PIN A0 // Определяем к какому пину подключен ИК датчик

int filtered_measur; // Переменная для фильтрации показаний дальномера
uint32_t timer;         // переменная таймера

float Read_IR(){   // Функция чтения данных с ИК дальномера
  int measur  = analogRead(IR_PIN) + 1;    // Считывание показаний АЦП

  // Далее идёт две реализации программного фильтра плавающего среднего
  // Для качественной работы фильтра необходимо постоянное считывание инфомации.
  // В данном примере фильтры работают в основном потоке программы. Это простая реализация, однако она требует более внимательно следить за функциями delay.  
  // В следующем примере будет представлена реализация с фильтрацией в прерываниях.

  // Реализация через деление разницы. Число 0.1 означает, к отфильтрованному значению добавляется 10% разницы с текущим занчением
  //filtered_measur += (measur - filtered_measur) * 0.1;

  // Реализация через битовый сдвиг разницы. Число 3 говорит от том, что разница делится на 2^3: на 8.  
  filtered_measur += (measur - filtered_measur) >> 3; 

  float dist    = 29.988 * pow(filtered_measur / 204.8, -1.173);  // Преобразование в сантиметры, деление на 204.8 - преобразование АЦП в вольты 
  return dist;
}


void setup() {
  pinMode(IR_PIN, INPUT); 
  Serial.begin(9600);
}

void loop() {
  float dist = Read_IR();   // Получение расстояния с датчика и фильтрация данных
  delay(10);                 // Задежка 10 мс

  if (millis() - timer >= 500) { // ищем разницу таймера
    timer = millis();            // сброс таймера
    Serial.println(dist);        // Вывод данных в терминал
  }
}