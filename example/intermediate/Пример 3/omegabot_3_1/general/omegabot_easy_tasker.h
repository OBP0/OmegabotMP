#pragma once
#include <Arduino.h>

/**
 * @brief Минимальный класс для созания интервальных задач и псевдопараллельности
 */
class unitask
{
public:

    typedef void (*unitask_task_type);

    unsigned int interv = 0; //Интервал мужду вызовами целевой функции

    bool active = true; //Параметр активности задачи, если задача не активна она не будет выполняться, а checkTask будет всегда возвращать false

    /**
     * @brief Инициализация задачи
     * @param task_ptr передается имя функции которая будет вызываться с некоторым интервалом
     * @param interval Интервал мужду вызовами целевой функции
     * @param initial_time если нужно чтобы от момента передачи функции в класс прошел заданный интервал до первого вызова целевой функции, то передать millis() иначе 0(по умолчанию)
     */
    unitask(void (*task_ptr)(), unsigned int interval, unsigned long initial_time = 0);

    /**
     * @brief Инициализация задачи
     * @param interval Интервал мужду целевым условием
     * @param initial_time если нужно чтобы от момента создания экземпляра класса прошел заданный интервал до первого вызова целевой функции, то передать millis() иначе 0(по умолчанию)
     */
    unitask(unsigned int interval, unsigned long initial_time = 0);

    unitask(){};

    /**
     * @brief Сервисная задача, вызывает целевую задачу по таймеру(желательно крутить как можно чаще)
     */
    void makeTask();

    /**
     * @brief Сервисная задача, проверяет можно ли вызывать функцию, если время пришло, возвращает 1 и сбрасывает таймер
     * @return true - если задачу пора выполнить, false если нужно еще подождать
     */
    bool checkTask();

private:
    void (*task)() = NULL; //Ссылка на функцию которой будет передано управление
    unsigned long prev = 0; //Время предыдущего вызова
};
